Clases mayuscula

Class Consciente inherits Persona{
//SI QUIERO MODIFICAR el metodo que existia, poner override
override method entrarEnContacto(alguien){
self.parasitoMasFuerte().infectarA(alguien)
//aca adentro modifico el method
}

//para hacer que se borren todos los que cumplen esa condicion de menor a cero
coleccion.removeAllSuchThat({p=>p.corduraAfectada()<=0)

//si quiero hacera algo varias veces(pero solo para esa misma accion) si es distinta no sirve. Le agrego cant.times
2.times({i=>pepe.desayunar()})
2.times({i=>parasitos.add(parasito)})

var distancia =(10->2)  
var distancia2=(2->1)
// x e y 
distancia.x() - distancia.y()
   10                2

//se puede agregar un new en el method

method hijo(){
	return new Parasito(corduraAfectada= 1.max(corduraAfectada/2)
}

class SinPlataException inherits Exception{}


/// lo uso donde quiero


throw new SinPlataException("Dinero Insuficiente")



//////mumuki
valorAbsoluto x  | x >= 0 = x
                 | x < 0 = -x

¡No es taaan distinto!, pero tomémonos un tiempo para ver las diferencias y similitudes.

Como siempre empezamos con el nombre de la función seguido de los parámetros, eso no cambió,
luego cada "definición" de la función empieza con el caracter pipe '|', seguido de la condición 
que tiene que cumplirse y después a que es igual en tal caso.





Ahora supongamos que queremos definir una función que nos indica según una edad, la cantidad de horas de sueño recomendable, 
que la describiremos (arbitrariamente) de la siguiente forma:

Para menores de 5 -> 11 horas
Para mayores de 30 -> 7 horas
Para cualquier otra edad -> 8 horas
Esto lo podemos escribir de la siguiente forma:

horasSuennoRecomendadoEnEdad x  | x < 5 = 11
                                | x > 30 = 7
                                | otherwise = 8

Así entonces, utilizaremos otherwise (que en español significa "de otra manera") cuando queramos definir a que equivale
la función en el caso de que no se cumplan ninguna de las anteriores condiciones.

Esta condición peculiar debe ser siempre la última. Si no, cosas terribles podrían suceder



///Patter Maching
esVocalCerrada 'o' = True
esVocalCerrada 'u' = True
esVocalCerrada 'a' = False
esVocalCerrada 'e' = False
esVocalCerrada 'i' = False
esVocalCerrada _ = False
